// <auto-generated />
using System;
using CalculadoraDeCotacoes.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CalculadoraDeCotacoes.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250220181146_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Cobertura", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("TipoCoberturaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("TipoCoberturaId");

                    b.ToTable("Cobertura", (string)null);
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Cotacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("IdParceiro")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdParceiro");

                    b.HasIndex("IdProduto");

                    b.ToTable("Cotacao", (string)null);
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.CotacaoBeneficiario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCotacao")
                        .HasColumnType("int");

                    b.Property<int>("IdParentesco")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Percentual")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCotacao");

                    b.HasIndex("IdParentesco");

                    b.ToTable("CotacaoBeneficiario", (string)null);
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.CotacaoCobertura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCobertura")
                        .HasColumnType("int");

                    b.Property<int>("IdCotacao")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorAgravo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorDesconto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdCobertura");

                    b.HasIndex("IdCotacao");

                    b.ToTable("CotacaoCobertura", (string)null);
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.FaixaDeIdade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Agravo")
                        .HasColumnType("int");

                    b.Property<int>("Desconto")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FaixaDeIdade", (string)null);
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Parceiro", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Parceiro", (string)null);
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<decimal>("Limite")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ValorBase")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Produto", (string)null);
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Segurado", b =>
                {
                    b.Property<int>("CotacaoId")
                        .HasColumnType("int");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<int>("Ddd")
                        .HasColumnType("int");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<decimal>("ImportanciaSegurada")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Premio")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Telefone")
                        .HasColumnType("int");

                    b.HasKey("CotacaoId");

                    b.ToTable("Segurado", (string)null);
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.TipoCobertura", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoCobertura", (string)null);
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.TipoParentesco", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.ToTable("TipoParentesco", (string)null);
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Cobertura", b =>
                {
                    b.HasOne("CalculadoraDeCotacoes.Domain.Entities.TipoCobertura", "TipoCobertura")
                        .WithMany("Coberturas")
                        .HasForeignKey("TipoCoberturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoCobertura");
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Cotacao", b =>
                {
                    b.HasOne("CalculadoraDeCotacoes.Domain.Entities.Parceiro", "Parceiro")
                        .WithMany("Cotacoes")
                        .HasForeignKey("IdParceiro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalculadoraDeCotacoes.Domain.Entities.Produto", "Produto")
                        .WithMany("Cotacoes")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parceiro");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.CotacaoBeneficiario", b =>
                {
                    b.HasOne("CalculadoraDeCotacoes.Domain.Entities.Cotacao", "Cotacao")
                        .WithMany("CotacoesBeneficiarios")
                        .HasForeignKey("IdCotacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalculadoraDeCotacoes.Domain.Entities.TipoParentesco", "TipoParentesco")
                        .WithMany("CotacoesBeneficiarios")
                        .HasForeignKey("IdParentesco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cotacao");

                    b.Navigation("TipoParentesco");
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.CotacaoCobertura", b =>
                {
                    b.HasOne("CalculadoraDeCotacoes.Domain.Entities.Cobertura", "Cobertura")
                        .WithMany("CotacoesCoberturas")
                        .HasForeignKey("IdCobertura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalculadoraDeCotacoes.Domain.Entities.Cotacao", "Cotacao")
                        .WithMany("CotacoesCoberturas")
                        .HasForeignKey("IdCotacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cobertura");

                    b.Navigation("Cotacao");
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Segurado", b =>
                {
                    b.HasOne("CalculadoraDeCotacoes.Domain.Entities.Cotacao", "Cotacao")
                        .WithOne("Segurado")
                        .HasForeignKey("CalculadoraDeCotacoes.Domain.Entities.Segurado", "CotacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cotacao");
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Cobertura", b =>
                {
                    b.Navigation("CotacoesCoberturas");
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Cotacao", b =>
                {
                    b.Navigation("CotacoesBeneficiarios");

                    b.Navigation("CotacoesCoberturas");

                    b.Navigation("Segurado");
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Parceiro", b =>
                {
                    b.Navigation("Cotacoes");
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.Produto", b =>
                {
                    b.Navigation("Cotacoes");
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.TipoCobertura", b =>
                {
                    b.Navigation("Coberturas");
                });

            modelBuilder.Entity("CalculadoraDeCotacoes.Domain.Entities.TipoParentesco", b =>
                {
                    b.Navigation("CotacoesBeneficiarios");
                });
#pragma warning restore 612, 618
        }
    }
}
